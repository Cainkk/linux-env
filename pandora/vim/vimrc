"Vundle {{{
if isdirectory("~/.vim/bundle/Vundle.vim")
"NOTE: pre-install: [git, curl]
"Plugins from *github*, *vim-scripts* or local place
"
"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
"
":h vundle "More details
":PluginList
":PluginInstall[!] "OR : vim +PluginInstall +qall
":PluginSearch foo
":PluginClean
  se nocp
  filetype off
  
  set rtp+=~/.vim/bundle/Vundle.vim
  "ALL Plugins should be between begin and end
  "Plugin name: username/reponame
  call vundle#begin() "can change place
    Plugin 'VundleVim/Vundle.vim' "Manage itself
    Plugin 'scrooloose/nerdtree' "{
      "DO-NOT USE winmanager
      let NERDTreeWinPos = 'left'
      let NERDTreeWinSize = 30
      let NERDTreeMinimalUI = 1
      let NERDTreeDirArrows = 1
      let NERDTreeQuitOnOpen = 1
    "}
  
    Plugin 'vim-scripts/matchit.zip'
    "Plugin 'vim-scripts/L9'
  
    Plugin 'vim-scripts/taglist.vim' "{
      "let Tlist_Use_Right_Window = 0 "default is left
      "let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'
      let Tlist_WinWidth = 30
      let Tlist_Exit_OnlyWindow = 1
      let Tlist_Enable_Fold_Column = 0
      let Tlist_Show_One_File = 1
    "}
  
    Plugin 'vim-scripts/Tagbar' "{
      "vi -S tagbar.vmb +q
      let g:tagbar_left = 1
      let g:tagbar_width = 30
    "}
  
    Plugin 'Cainkk/cscope_maps.vim'
    "Plugin 'vim-scripts/cscope_macros.vim' "Fixme
    "Plugin 'SirVer/ultisnips'
    "Plugin 'Valloric/YouCompleteMe' "{
      "PRE-CONDITION:
      "sudo apt-get install -y libclang-dev build-essential cmake
      "+ python-dev python3-dev
      "Ignore libboost-dev
      "
      "semantic support for C-family languages:
      "cd ~/.vim/bundle/YouCompleteMe
      "./install.py --clang-completer --system-libclang
      "support --all, but NEED more tools
    "}
  call vundle#end()
  filetype plugin indent on
endif
"}}}

""""""""""""""""""""""""""""""""""""""""""""""""""
"COMMON"""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
se nocp nu ru sc  is hls  ai si cin scs "basic setup
se hlg=en,cn
"se mouse=h "copy: <S-LClick>
runtime! ftplugin/man.vim
filetype on
syntax on
"only backup origion if no git
"cm bak se bdir+=. pm=.org
"backup every time with bex(backupext) option
"au BufWritePre * let &bex = '-' . strftime("%Y%b%d%X") . '~'
"se pt=\\p

"TODO: optimize diff mode
"hi Directory  cterm=bold ctermfg=Cyan guifg=White
"hi DiffAdd    ctermbg=DarkCyan guibg=DarkCyan
"hi DiffDelete ctermbg=DarkCyan guibg=DarkCyan
"hi DiffChange ctermbg=DarkCyan guibg=DarkCyan
"hi DiffText   ctermfg=Red ctermbg=DarkCyan guifg=Red guibg=DarkCyan

se cul 
hi cursorline cterm=none ctermbg=0 guibg=#073642
""(DEFINE statusline)"""""""""""""""""""""""""""""
hi StatusLine cterm=bold ctermfg=yellow ctermbg=blue
function! CurDir()
  let curdir = substitute(getcwd(), $HOME, "~", "g")
  return curdir
endfunction
"TODO: How to split too long line
se ls=2 stl=[%n][%{&ff},\ %{&fenc}]\ %f%y%m%r%h\ \|PWD:\ %{CurDir()}\ \|%=\|%l,%c\ %p%%
""(DEFINE tabline)""""""""""""""""""""""""""""""""
hi TabLineSel  term=bold cterm=bold ctermfg=Black ctermbg=DarkMagenta
hi TabLine     term=bold cterm=bold ctermfg=Black ctermbg=White
hi TabLineFill term=bold cterm=bold ctermfg=Red   ctermbg=White
if has('gui')
  set guioptions-=e
endif
if exists("+showtabline")
  function! MyTabLine()
    let s = ''
    let t = tabpagenr()
    let i = 1
    while i <= tabpagenr('$')
      let buflist = tabpagebuflist(i)
      let winnr = tabpagewinnr(i)
      let s .= '%' . i . 'T' . (i == t ? '%#TabLineSel#' : '%#TabLine#') . ' ' . '[' . i . ':'
      let s .= winnr . '/' . tabpagewinnr(i,'$') . ']'
      let s .= '%*' . (i == t ? '%#TabLineSel#' : '%#TabLine#')
      let bufnr = buflist[winnr - 1]
      let file = bufname(bufnr)
      let buftype = getbufvar(bufnr, 'buftype')
      if buftype == 'nofile'
        if file =~ '\/.'
          let file = substitute(file, '.*\/\ze.', '', '')
        endif
      else
        let file = fnamemodify(file, ':p:t')
      endif
      if file == ''
        let file = 'No Name'
      endif
      let s .= file
      let i = i + 1
    endwhile
    let s .= '%T%#TabLineFill#%=' . (tabpagenr('$') > 1 ? '%999XX' : 'X')
    return s
  endfunction
  set stal=1 tabline=%!MyTabLine()
endif

""(DEFINE VIM-plugin)"""""""""""""""""""""""""""""
"Choose taglist OR tagbar plugin
function s:MyTagOrTreeOpen()
  let l:TreeOpened = exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1

  if 0 "Tagbar bug when open file read-only 
    let l:TagbarOpened = bufwinnr("__Tagbar__") != -1
    if !l:TagbarOpened && !l:TreeOpened
      silent! NERDTreeClose
      silent! TagbarOpen fj
    elseif !l:TreeOpened
      silent! TagbarClose
      silent! NERDTreeToggle
    else
      silent! NERDTreeClose
    endif

  else
    let l:TlistOpened = bufwinnr(g:TagList_title) != -1
    if !l:TlistOpened && !l:TreeOpened
      silent! NERDTreeClose
      silent! TlistOpen
    elseif !l:TreeOpened
      silent! TlistClose
      silent! NERDTreeToggle
    else
      silent! NERDTreeClose
    endif

  endif
endfunction

let s:old_cpo = &cpo
set cpo&vim
nmap <silent> <F3> :call <SID>MyTagOrTreeOpen()<CR>
let &cpo = s:old_cpo
au! QuickFixCmdPre vimgrep silent! copen 15

""(DEFINE MAPPING)""""""""""""""""""""""""""""""""
"if exists("mapleader") | let s:MAPLEADER = mapleader | endif
let mapleader = "\<Space>"
nn <silent> <Leader>v :NERDTreeFind<CR>
nn <silent> <Leader>l :se list lcs=tab:>-,trail:-<CR>
nn <silent> \h :noh<CR>
nn <silent> \l :se nolist<CR>
"if exists("MAPLEADER") | let mapleader = s:MAPLEADER | unl! s:MAPLERADER | el | unl! mapleader | endif

""(DEFINE COMMAND)""""""""""""""""""""""""""""""""
"Tab setting: (never set sts: split line into TABs)
com! -nargs=0 Tab2 se et ts=2 sw=2
com! -nargs=0 Tab3 se et ts=3 sw=3
com! -nargs=0 Tab4 se et ts=4 sw=4
com! -nargs=0 Tab8 se et ts=8 sw=8
"Change READ-ONLY to writeable
com! -nargs=0 W setl write ma
com! -nargs=0 Wa set write ma "All buffers writeable
"Splite new window on right
com! -nargs=? -complete=file Rs bel vs <args>
com! -nargs=? -complete=file Bs bel s <args>
"Show non-printable format
com! -nargs=0 List se list lcs=tab:>-,trail:-
"dos2unix
com! -nargs=0 Unix se ff=unix
""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
"Tips Here

"Convert dos file to unix
"se ff=unix

""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" GUI Configuration
hi Normal guifg=#AAAAAA guibg=#002B36
se gfn=DejaVu\ LGC\ Sans\ Mono\ 12

